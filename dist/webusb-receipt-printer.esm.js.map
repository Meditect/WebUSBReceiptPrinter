{"version":3,"file":"webusb-receipt-printer.esm.js","sources":["../src/event-emitter.ts","../src/main.ts"],"sourcesContent":["type EventsMap = Record<string, unknown[]>;\n\nexport class EventEmitter<E extends EventsMap> {\n\tprivate events = new Map<keyof E, Set<(...args: E[keyof E]) => void>>();\n\n\ton<K extends keyof E>(event: K, listener: (...args: E[K]) => void): void {\n\t\tconst set =\n\t\t\t(this.events.get(event) as Set<(...args: E[K]) => void>) ?? new Set();\n\t\tset.add(listener);\n\t\tthis.events.set(\n\t\t\tevent,\n\t\t\tset as unknown as Set<(...args: E[keyof E]) => void>,\n\t\t);\n\t}\n\n\temit<K extends keyof E>(event: K, ...args: E[K]): void {\n\t\tconst set = this.events.get(event) as\n\t\t\t| Set<(...args: E[K]) => void>\n\t\t\t| undefined;\n\t\tif (!set) return;\n\t\tfor (const fn of set) setTimeout(() => fn(...args), 0);\n\t}\n}\n","import { EventEmitter } from \"./event-emitter\";\n\ntype PrinterLanguage = \"esc-pos\" | \"star-prnt\" | \"star-graphics\" | \"star-line\";\ntype CodepageMapping =\n\t| \"default\"\n\t| \"zjiang\"\n\t| \"mpt\"\n\t| \"bixolon\"\n\t| \"star\"\n\t| \"epson\"\n\t| \"citizen\"\n\t| \"hp\"\n\t| \"xprinter\";\n\ntype ConnectedEventPayload = {\n\ttype: \"usb\";\n\tmanufacturerName?: string;\n\tproductName?: string;\n\tserialNumber?: string;\n\tvendorId: number;\n\tproductId: number;\n\tlanguage: PrinterLanguage;\n\tcodepageMapping: CodepageMapping;\n};\n\nexport type PrinterEvents = {\n\tconnected: [ConnectedEventPayload]; // 1 argument\n\tdisconnected: []; // aucun argument\n\tdata: [DataView]; // 1 argument\n};\n\ntype MaybeAsync<T> = T | Promise<T>;\n\ntype DeviceProfile = {\n\tfilters: USBDeviceFilter[];\n\tconfiguration: number;\n\tinterface: number;\n\tlanguage:\n\t\t| PrinterLanguage\n\t\t| ((device: USBDevice) => MaybeAsync<PrinterLanguage>);\n\tcodepageMapping:\n\t\t| CodepageMapping\n\t\t| ((device: USBDevice) => MaybeAsync<CodepageMapping>);\n};\n\nconst DeviceProfiles: DeviceProfile[] = [\n\t/* POS-8022 and similar printers */\n\t{\n\t\tfilters: [{ vendorId: 0x0483, productId: 0x5743 }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\t\tlanguage: \"esc-pos\",\n\t\tcodepageMapping: \"default\",\n\t},\n\n\t/* POS-5805, POS-8360 and similar printers */\n\t{\n\t\tfilters: [{ vendorId: 0x0416, productId: 0x5011 }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\t\tlanguage: \"esc-pos\",\n\t\tcodepageMapping: \"zjiang\",\n\t},\n\n\t/* MPT-II and similar printers */\n\t{\n\t\tfilters: [{ vendorId: 0x0483, productId: 0x5840 }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\t\tlanguage: \"esc-pos\",\n\t\tcodepageMapping: \"mpt\",\n\t},\n\n\t/* Samsung SRP (Bixolon) */\n\t{\n\t\tfilters: [{ vendorId: 0x0419 }, { vendorId: 0x1504 }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\t\tlanguage: \"esc-pos\",\n\t\tcodepageMapping: \"bixolon\",\n\t},\n\n\t/* Star */\n\t{\n\t\tfilters: [{ vendorId: 0x0519 }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\n\t\tlanguage: (device: USBDevice): PrinterLanguage => {\n\t\t\tlet language: PrinterLanguage = \"star-line\";\n\t\t\tlet name = device.productName ?? \"\";\n\n\t\t\t// Normalisation des noms\n\t\t\tname = name.replace(/^Star\\s+/i, \"\");\n\t\t\tname = name.replace(\n\t\t\t\t/^TSP(1|4|6|7|8|10)(13|43)(.*)?$/,\n\t\t\t\t(_m, p1, _p2, p3) => \"TSP\" + p1 + \"00\" + (p3 || \"\"),\n\t\t\t);\n\t\t\tname = name.replace(\n\t\t\t\t/^TSP(55|65)(1|4)(.*)?$/,\n\t\t\t\t(_m, p1, _p2, p3) => \"TSP\" + p1 + \"0\" + (p3 || \"\"),\n\t\t\t);\n\t\t\tname = name.replace(\n\t\t\t\t/^TSP([0-9]+)(II|III|IV|V|VI)?(.*)?$/,\n\t\t\t\t(_m, p1, p2) => \"TSP\" + p1 + (p2 || \"\"),\n\t\t\t);\n\n\t\t\tswitch (name) {\n\t\t\t\tcase \"TSP100IV\":\n\t\t\t\tcase \"mPOP\":\n\t\t\t\tcase \"mC-Label3\":\n\t\t\t\tcase \"mC-Print3\":\n\t\t\t\tcase \"mC-Print2\":\n\t\t\t\t\tlanguage = \"star-prnt\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"TSP100\":\n\t\t\t\tcase \"TSP100II\":\n\t\t\t\tcase \"TSP100III\":\n\t\t\t\t\tlanguage = \"star-graphics\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"BSC10\":\n\t\t\t\tcase \"BSC10BR\":\n\t\t\t\tcase \"BSC10II\":\n\t\t\t\t\tlanguage = \"esc-pos\";\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn language;\n\t\t},\n\n\t\tcodepageMapping: \"star\",\n\t},\n\n\t/* Epson */\n\t{\n\t\tfilters: [{ vendorId: 0x04b8 }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\t\tlanguage: \"esc-pos\",\n\t\tcodepageMapping: \"epson\",\n\t},\n\n\t/* Citizen */\n\t{\n\t\tfilters: [{ vendorId: 0x1d90 }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\t\tlanguage: \"esc-pos\",\n\t\tcodepageMapping: \"citizen\",\n\t},\n\n\t/* HP */\n\t{\n\t\tfilters: [{ vendorId: 0x05d9 }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\t\tlanguage: \"esc-pos\",\n\t\tcodepageMapping: \"hp\",\n\t},\n\n\t/* Fujitsu */\n\t{\n\t\tfilters: [{ vendorId: 0x04c5 }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\t\tlanguage: \"esc-pos\",\n\t\tcodepageMapping: \"epson\",\n\t},\n\n\t/* Dtronic */\n\t{\n\t\tfilters: [{ vendorId: 0x0fe6, productId: 0x811e }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\t\tlanguage: \"esc-pos\",\n\t\tcodepageMapping: \"epson\",\n\t},\n\n\t/* Xprinter */\n\t{\n\t\tfilters: [{ vendorId: 0x1fc9, productId: 0x2016 }],\n\t\tconfiguration: 1,\n\t\tinterface: 0,\n\t\tlanguage: \"esc-pos\",\n\t\tcodepageMapping: \"xprinter\",\n\t},\n];\n\nexport default class WebUSBReceiptPrinter {\n\tprivate emitter: EventEmitter<PrinterEvents>;\n\tprivate device: USBDevice | null = null;\n\tprivate profile: DeviceProfile | null = null;\n\tprivate endpoints: {\n\t\tinput: USBEndpoint | null;\n\t\toutput: USBEndpoint | null;\n\t} = { input: null, output: null };\n\n\tconstructor() {\n\t\tthis.emitter = new EventEmitter<PrinterEvents>();\n\n\t\t// Déconnexion physique du device\n\t\tnavigator.usb.addEventListener(\n\t\t\t\"disconnect\",\n\t\t\t(event: USBConnectionEvent) => {\n\t\t\t\tif (this.device === event.device) {\n\t\t\t\t\tthis.emitter.emit(\"disconnected\");\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n\n\tasync connect(): Promise<void> {\n\t\ttry {\n\t\t\tconst filters = DeviceProfiles.flatMap((p) => p.filters);\n\t\t\tconst device = await navigator.usb.requestDevice({ filters });\n\n\t\t\tif (device) {\n\t\t\t\tawait this.open(device);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(`Could not connect! ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync reconnect(previousDevice: {\n\t\tserialNumber?: string;\n\t\tvendorId: number;\n\t\tproductId: number;\n\t}): Promise<void> {\n\t\tconst devices = await navigator.usb.getDevices();\n\n\t\tconst device =\n\t\t\tdevices.find((d) => d.serialNumber === previousDevice.serialNumber) ??\n\t\t\tdevices.find(\n\t\t\t\t(d) =>\n\t\t\t\t\td.vendorId === previousDevice.vendorId &&\n\t\t\t\t\td.productId === previousDevice.productId,\n\t\t\t);\n\n\t\tif (device) {\n\t\t\tawait this.open(device);\n\t\t}\n\t}\n\n\tprivate async open(device: USBDevice): Promise<void> {\n\t\tthis.device = device;\n\n\t\tthis.profile =\n\t\t\tDeviceProfiles.find((item) =>\n\t\t\t\titem.filters.some((filter) =>\n\t\t\t\t\tfilter.productId != null\n\t\t\t\t\t\t? filter.vendorId === device.vendorId &&\n\t\t\t\t\t\t\tfilter.productId === device.productId\n\t\t\t\t\t\t: filter.vendorId === device.vendorId,\n\t\t\t\t),\n\t\t\t) ?? null;\n\n\t\tif (!this.profile) {\n\t\t\tthrow new Error(\"No matching device profile found.\");\n\t\t}\n\n\t\tawait device.open();\n\t\tawait device.selectConfiguration(this.profile.configuration);\n\t\tawait device.claimInterface(this.profile.interface);\n\n\t\tconst iface = device.configuration?.interfaces.find(\n\t\t\t(i) => i.interfaceNumber === this.profile!.interface,\n\t\t);\n\t\tif (!iface) {\n\t\t\tthrow new Error(\"USB interface not found on device.\");\n\t\t}\n\n\t\t// `alternate` est l’alternate courant, défini par le navigateur\n\t\tconst alt = iface.alternate ?? iface.alternates?.[0];\n\t\tif (!alt) {\n\t\t\tthrow new Error(\"USB alternate interface not available.\");\n\t\t}\n\n\t\tthis.endpoints.output =\n\t\t\talt.endpoints.find((e) => e.direction === \"out\") ?? null;\n\t\tthis.endpoints.input =\n\t\t\talt.endpoints.find((e) => e.direction === \"in\") ?? null;\n\n\t\ttry {\n\t\t\t// Certains drivers n’aiment pas reset -> on encapsule\n\t\t\tawait device.reset();\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\n\t\tconst language = await this.evaluate(this.profile.language);\n\t\tconst codepageMapping = await this.evaluate(this.profile.codepageMapping);\n\n\t\tthis.emitter.emit(\"connected\", {\n\t\t\ttype: \"usb\",\n\t\t\tmanufacturerName: device.manufacturerName ?? undefined,\n\t\t\tproductName: device.productName ?? undefined,\n\t\t\tserialNumber: device.serialNumber ?? undefined,\n\t\t\tvendorId: device.vendorId,\n\t\t\tproductId: device.productId,\n\t\t\tlanguage,\n\t\t\tcodepageMapping,\n\t\t});\n\t}\n\n\tprivate async evaluate<T>(\n\t\texpression: T | ((device: USBDevice) => MaybeAsync<T>),\n\t): Promise<T> {\n\t\tif (typeof expression === \"function\") {\n\t\t\tconst fn = expression as (d: USBDevice) => MaybeAsync<T>;\n\t\t\treturn fn(this.device as USBDevice);\n\t\t}\n\t\treturn expression as T;\n\t}\n\n\tasync listen(): Promise<boolean | void> {\n\t\tif (this.endpoints.input) {\n\t\t\tawait this.read();\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate async read(): Promise<void> {\n\t\tif (!this.device || !this.endpoints.input) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await this.device.transferIn(\n\t\t\tthis.endpoints.input.endpointNumber,\n\t\t\t64,\n\t\t);\n\t\tif (result?.data?.byteLength) {\n\t\t\tthis.emitter.emit(\"data\", result.data);\n\t\t}\n\t\t// boucle\n\t\tawait this.read();\n\t}\n\n\tasync disconnect(): Promise<void> {\n\t\tif (!this.device) return;\n\n\t\ttry {\n\t\t\tawait this.device.close();\n\t\t} finally {\n\t\t\tthis.device = null;\n\t\t\tthis.profile = null;\n\t\t\tthis.endpoints = { input: null, output: null };\n\t\t\tthis.emitter.emit(\"disconnected\");\n\t\t}\n\t}\n\n\tasync print(command: BufferSource): Promise<void> {\n\t\tif (this.device && this.endpoints.output) {\n\t\t\ttry {\n\t\t\t\tawait this.device.transferOut(\n\t\t\t\t\tthis.endpoints.output.endpointNumber,\n\t\t\t\t\tcommand,\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(\"No device/output endpoint available.\");\n\t\t}\n\t}\n\n\taddEventListener<K extends keyof PrinterEvents>(\n\t\tname: K,\n\t\tfn: (...args: PrinterEvents[K]) => void,\n\t): void {\n\t\tthis.emitter.on(name, fn);\n\t}\n}\n"],"names":["EventEmitter","event","listener","set","args","fn","DeviceProfiles","device","language","name","_m","p1","_p2","p3","p2","WebUSBReceiptPrinter","filters","p","error","previousDevice","devices","d","item","filter","iface","i","alt","e","codepageMapping","expression","result","command"],"mappings":"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"}