class e{constructor(e){this._events={}}on(e,n){this._events[e]=this._events[e]||[],this._events[e].push(n)}emit(e,...n){let t=this._events[e];t&&t.forEach((e=>{setTimeout((()=>e(...n)),0)}))}}const n=[{filters:[{vendorId:1046,productId:20497}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"zjiang"},{filters:[{vendorId:1049},{vendorId:5380}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"bixolon"},{filters:[{vendorId:1305}],configuration:1,interface:0,language:"star-prnt",codepageMapping:"star"},{filters:[{vendorId:1208}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"epson"},{filters:[{vendorId:7568}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"citizen"},{filters:[{vendorId:4070,productId:33054}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"epson"},{filters:[{vendorId:8137,productId:8214}],configuration:1,interface:0,language:"esc-pos",codepageMapping:"xprinter"}];class t{constructor(){this._internal={emitter:new e,device:null,profile:null,endpoints:{input:null,output:null}},navigator.usb.addEventListener("disconnect",(e=>{this._internal.device==e.device&&this._internal.emitter.emit("disconnected")}))}async connect(){try{let e=await navigator.usb.requestDevice({filters:n.map((e=>e.filters)).reduce(((e,n)=>e.concat(n)))});e&&await this.open(e)}catch(e){console.log("Could not connect! "+e)}}async reconnect(e){let n=await navigator.usb.getDevices(),t=n.find((n=>n.serialNumber==e.serialNumber));t||(t=n.find((n=>n.vendorId==e.vendorId&&n.productId==e.productId))),t&&await this.open(t)}async open(e){this._internal.device=e,this._internal.profile=n.find((e=>e.filters.some((e=>e.vendorId&&e.productId?e.vendorId==this._internal.device.vendorId&&e.productId==this._internal.device.productId:e.vendorId==this._internal.device.vendorId)))),await this._internal.device.open(),await this._internal.device.selectConfiguration(this._internal.profile.configuration),await this._internal.device.claimInterface(this._internal.profile.interface);let t=this._internal.device.configuration.interfaces.find((e=>e.interfaceNumber==this._internal.profile.interface));this._internal.endpoints.output=t.alternate.endpoints.find((e=>"out"==e.direction)),this._internal.endpoints.input=t.alternate.endpoints.find((e=>"in"==e.direction)),await this._internal.device.reset(),this._internal.emitter.emit("connected",{type:"usb",manufacturerName:this._internal.device.manufacturerName,productName:this._internal.device.productName,serialNumber:this._internal.device.serialNumber,vendorId:this._internal.device.vendorId,productId:this._internal.device.productId,language:this._internal.profile.language,codepageMapping:this._internal.profile.codepageMapping})}async listen(){if(this._internal.device)try{const e=await this._internal.device.transferIn(this._internal.endpoints.input.endpointNumber,64);e instanceof USBInTransferResult&&e.data.byteLength&&this._internal.emitter.emit("data",e.data),this.listen()}catch(e){}}async disconnect(){this._internal.device&&(await this._internal.device.close(),this._internal.device=null,this._internal.profile=null,this._internal.emitter.emit("disconnected"))}async print(e){if(this._internal.device&&this._internal.endpoints.output)try{await this._internal.device.transferOut(this._internal.endpoints.output.endpointNumber,e)}catch(e){console.log(e)}}addEventListener(e,n){this._internal.emitter.on(e,n)}}export{t as default};
